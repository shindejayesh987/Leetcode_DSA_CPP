class Solution {
public:
    int characterReplacement(string s, int k) {
        // Create an array to count the occurrences of each character in the alphabet.
        vector<int> count(26); // We assume only uppercase letters ('A' to 'Z').

        int maxCount = 0; // Keeps track of the most frequent character within the current window.

        int i = 0; // Left pointer of the sliding window.

        // Iterate through the characters of the input string using a right pointer (j).
        for (int j = 0; j < s.size(); j++) {
            // Update the count of the current character at position 'j'.
            count[s[j] - 'A']++;

            // Update 'maxCount' with the maximum character count within the current window.
            maxCount = max(maxCount, count[s[j] - 'A']);

            // Check if the difference between the window size and 'maxCount' exceeds 'k'.
            if (j - i + 1 - maxCount > k) {
                // If the number of replacements needed exceeds 'k', we need to shrink the window.
                // Move the left pointer 'i' to the right and decrement the count of the character at 'i'.
                count[s[i] - 'A']--;
                i++;
            }
        }

        // The result is the length of the longest valid substring within the constraints of 'k' replacements.
        // We can calculate this by subtracting 'i' from the total size of the string.
        return s.size() - i;
    }
};
