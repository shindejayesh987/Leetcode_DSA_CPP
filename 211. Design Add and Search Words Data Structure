class TrieNode {
public:
    TrieNode* children[26]; // An array to represent links to child nodes (a to z)
    bool isWord; // Flag to mark the end of a word

    TrieNode() {
        for (int i = 0; i < 26; i++) {
            children[i] = NULL; // Initialize all child links to NULL
        }
        isWord = false; // Initialize the isWord flag to false
    }
};

// WordDictionary class represents a dictionary with word search functionality
class WordDictionary {
public:
    WordDictionary() {
        root = new TrieNode(); // Create a root node when a WordDictionary is instantiated
    }

    // Add a word to the dictionary
    void addWord(string word) {
        TrieNode* temp = root; // Start at the root node

        for (char c : word) {

            int index = c - 'a'; // Convert the character to an index (0 to 25)

            if (temp->children[index] == nullptr) {
                temp->children[index] = new TrieNode(); // Create a new node if the link doesn't exist
            }
            temp = temp->children[index]; // Move to the child node
        }

        temp->isWord = true; // Mark the last node as the end of a word
    }

    // Search for a word in the dictionary, supporting '.' wildcard for any character
    bool search(string word) {
        TrieNode* node = root;
        return searchInNode(word, 0, node);
    }
private:
    TrieNode* root;

    // Recursive function to search for a word with wildcard support
    bool searchInNode(string& word, int i, TrieNode* node) {
        if (node == NULL) {
            return false; // If the node is NULL, the word can't be found
        }
        if (i == word.size()) {
            return node->isWord; // If we've reached the end of the word, return whether the current node marks the end of a word
        }
        if (word[i] != '.') {
            return searchInNode(word, i + 1, node->children[word[i] - 'a']); // Recursively search with the next character
        }
        // If a '.' is encountered, try all possible next characters (a to z)
        for (int j = 0; j < 26; j++) {
            if (searchInNode(word, i + 1, node->children[j])) {
                return true;
            }
        }
        return false; // Return false if no matching word is found
    }
};
