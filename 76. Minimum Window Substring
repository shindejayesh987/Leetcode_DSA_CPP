class Solution {
public:
    string minWindow(string s, string t) {
        // Create a hash map 'm' to count the occurrences of characters in string 't'.
        unordered_map<char, int> m;

        // Initialize the hash map with character counts from string 't'.
        for (int i = 0; i < t.size(); i++) {
            m[t[i]]++;
        }

        int i = 0; // Left pointer of the window.
        int j = 0; // Right pointer of the window.

        // 'counter' keeps track of the number of characters from 't' that must be in 's'.
        int counter = t.size();

        int minStart = 0; // Starting index of the minimum window.
        int minLength = INT_MAX; // Length of the minimum window, initialized to a large value.

        // Start a loop that iterates through the characters of the input string 's'.
        while (j < s.size()) {
            // If the character at 's[j]' exists in 't', decrease the 'counter'.
            if (m[s[j]] > 0) {
                counter--;
            }

            // Decrease the character count for 's[j]' in the hash map 'm'.
            m[s[j]]--;

            // Move the right pointer 'j' to expand the window.
            j++;

            // When a valid window is found, move the left pointer 'i' to find a smaller window.
            while (counter == 0) {
                // Update the minimum window information if the current window is smaller.
                if (j - i < minLength) {
                    minStart = i;
                    minLength = j - i;
                }

                // Increase the character count for 's[i]' in the hash map 'm'.
                m[s[i]]++;

                // If the character at 's[i]' exists in 't', increase the 'counter'.
                if (m[s[i]] > 0) {
                    counter++;
                }

                // Move the left pointer 'i' to the right.
                i++;
            }
        }

        // Check if a minimum window was found, and return it as a substring of 's'.
        if (minLength != INT_MAX) {
            return s.substr(minStart, minLength);
        }

        // If no valid window was found, return an empty string.
        return "";
    }
};
