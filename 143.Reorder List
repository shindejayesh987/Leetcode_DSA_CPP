void reorderList(ListNode* head) {
    // Check if the list is empty or contains only one element, in which case no changes are needed.
    if (head->next == NULL) {
        return;
    }
    
    // Initialize pointers to help split and reverse the list.
    ListNode* prev = NULL; // Keeps track of the previous node.
    ListNode* slow = head; // Points to the middle of the list (or the end of the first half).
    ListNode* fast = head; // Moves twice as fast as 'slow' to find the middle point.
    
    // Find the middle of the list and split it into two separate lists.
    while (fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    
    prev->next = NULL; // Set the 'next' pointer of the last node in the first half to NULL.

    // Reverse the second half of the list.
    ListNode* l1 = head;       // Points to the first half.
    ListNode* l2 = reverse(slow);  // Reverse the second half.
    
    // Merge the two sublists alternately to create the zigzag order.
    merge(l1, l2);
}

// Helper function to reverse a linked list.
ListNode* reverse(ListNode* head) {
    ListNode* prev = NULL;
    ListNode* curr = head;
    ListNode* next = curr->next;
    
    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    
    return prev; // Return the new head of the reversed list.
}

// Helper function to merge two linked lists alternately.
void merge(ListNode* l1, ListNode* l2) {
    while (l1 != NULL) {
        ListNode* p1 = l1->next;
        ListNode* p2 = l2->next;
        
        l1->next = l2;
        if (p1 == NULL) {
            break;
        }
        l2->next = p1;
        
        l1 = p1;
        l2 = p2;
    }
}
