#include <iostream>
#include <string>
using namespace std;

class TrieNode {
public:
    TrieNode* children[26]; // An array to represent links to child nodes (for each letter of the alphabet)
    bool isWord; // Flag to mark the end of a word
    
    TrieNode() {
        for (int i = 0; i < 26; i++) {
            children[i] = nullptr; // Initialize all child links to nullptr
        }
        isWord = false; // Initialize the isWord flag to false
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode(); // Create a root node when a Trie is instantiated
    }
    
    // Insert a word into the Trie
    void insert(string word) {
        TrieNode* temp = root; // Start at the root node

        for (char c : word) {

            int index = c - 'a'; // Convert the character to an index (0 to 25)

            if (temp->children[index] == nullptr) {
                temp->children[index] = new TrieNode(); // Create a new node if the link doesn't exist
            }
            temp = temp->children[index]; // Move to the child node
        }

        temp->isWord = true; // Mark the last node as the end of a word
    }
    
    // Search for a word in the Trie
    bool search(string word) {
        TrieNode* temp = root; // Start at the root node

        for (char c : word) {

            int index = c - 'a'; // Convert the character to an index (0 to 25)

            if (temp->children[index] == nullptr) {
                return false; // Return false if the character is not found
            }

            temp = temp->children[index]; // Move to the child node
        }

        return temp->isWord; // Return true if the complete word is found
    }
    
    // Check if the Trie contains words that start with a given prefix
    bool startsWith(string prefix) {
        TrieNode* temp = root; // Start at the root node

        for (char c : prefix) {

            int index = c - 'a'; // Convert the character to an index (0 to 25)

            if (temp->children[index] == nullptr) {
                return false; // Return false if the prefix is not found
            }

            temp = temp->children[index]; // Move to the child node
        }

        return true; // Return true if the Trie contains words starting with the given prefix
    }
private:
    TrieNode* root; // The root of the Trie
};
