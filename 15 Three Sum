class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        // Initialize a vector to store the resulting triplets.
        vector<vector<int>> result;
        
        // Get the size of the input vector 'nums'.
        int n = nums.size();
        
        // If the size of 'nums' is less than 3, there can't be any triplets, so return an empty result.
        if (n < 3) {
            return result;
        }
        
        // Sort the input vector 'nums' in non-decreasing order.
        sort(nums.begin(), nums.end());
        
        // Start a loop to iterate through the elements of 'nums' (up to the third-to-last element).
        for (int i = 0; i < n - 2; i++) {
            // If the current element is greater than 0, break out of the loop because further elements will also be greater than 0.
            if (nums[i] > 0) {
                break;
            }
            // If the current element is equal to the previous element, skip it to avoid duplicate triplets.
            if (i > 0 && nums[i - 1] == nums[i]) {
                continue;
            }
            
            // Initialize two pointers 'j' and 'k'.
            int j = i + 1;
            int k = n - 1;
            
            // Start a loop to find pairs of elements that sum to the negative of the current element.
            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                
                // If the sum is less than 0, increment 'j' to move towards a larger sum.
                if (sum < 0) {
                    j++;
                } 
                // If the sum is greater than 0, decrement 'k' to move towards a smaller sum.
                else if (sum > 0) {
                    k--;
                } 
                // If the sum is zero, a valid triplet is found and added to 'result'.
                else {
                    result.push_back({nums[i], nums[j], nums[k]});
                    
                    // Skip duplicate elements.
                    while (j < k && nums[j] == nums[j + 1]) {
                        j++;
                    }
                    j++;
                    
                    while (j < k && nums[k - 1] == nums[k]) {
                        k--;
                    }
                    k--;
                }
            }
        }
        
        // Return the vector of valid triplets.
        return result;
    }
};
